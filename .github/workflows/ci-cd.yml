name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4.4'
        bundler-cache: true
    
    - name: Install dependencies
      run: bundle install
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Run HTML Proofer
      run: |
        gem install html-proofer
        htmlproofer ./_site --disable-external --allow-hash-href
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jekyll-site
        path: _site/

  deploy-preview:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      pull-requests: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to Amplify Preview
      id: deploy
      run: |
        # Get Amplify app ID
        APP_ID="${{ secrets.AMPLIFY_APP_ID }}"
        
        # Create deployment for PR
        DEPLOYMENT_ID=$(aws amplify create-deployment \
          --app-id $APP_ID \
          --branch-name "pr-${{ github.event.pull_request.number }}" \
          --query 'jobSummary.jobId' \
          --output text)
        
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        
        # Start deployment
        aws amplify start-deployment \
          --app-id $APP_ID \
          --branch-name "pr-${{ github.event.pull_request.number }}" \
          --job-id $DEPLOYMENT_ID
        
        # Wait for deployment to complete
        while true; do
          STATUS=$(aws amplify get-job \
            --app-id $APP_ID \
            --branch-name "pr-${{ github.event.pull_request.number }}" \
            --job-id $DEPLOYMENT_ID \
            --query 'job.summary.status' \
            --output text)
          
          if [ "$STATUS" = "SUCCEED" ]; then
            echo "Deployment succeeded!"
            break
          elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "CANCELLED" ]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          fi
          
          echo "Current status: $STATUS. Waiting..."
          sleep 10
        done
        
        # Get preview URL
        PREVIEW_URL=$(aws amplify get-branch \
          --app-id $APP_ID \
          --branch-name "pr-${{ github.event.pull_request.number }}" \
          --query 'branch.displayName' \
          --output text)
        
        echo "preview_url=https://pr-${{ github.event.pull_request.number }}.$APP_ID.amplifyapp.com" >> $GITHUB_OUTPUT
    
    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const preview_url = '${{ steps.deploy.outputs.preview_url }}';
          const body = `## ðŸš€ Preview Deployment
          
          Your preview is ready at: ${preview_url}
          
          **Build Status:** âœ… Success
          **Deployment ID:** ${{ steps.deploy.outputs.deployment_id }}
          
          This preview will be automatically updated when you push new commits.`;
          
          // Find and update existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Preview Deployment')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  cleanup-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Delete preview branch
      run: |
        APP_ID="${{ secrets.AMPLIFY_APP_ID }}"
        
        # Delete the preview branch
        aws amplify delete-branch \
          --app-id $APP_ID \
          --branch-name "pr-${{ github.event.pull_request.number }}" || true